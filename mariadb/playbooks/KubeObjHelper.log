arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "Service", 
    "spec": {
        "ports": [
            {
                "port": 3306, 
                "name": "mariadb"
            }
        ], 
        "selector": {
            "app": "mariadb"
        }
    }, 
    "metadata": {
        "labels": {
            "app": "mariadb"
        }, 
        "namespace": "osp-dev", 
        "name": "mariadb", 
        "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"
        }
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"load_balancer": {"ingress": null}}, "kind": "Service", "spec": {"cluster_ip": "172.30.18.206", "external_i_ps": null, "load_balancer_ip": null, "external_name": null, "deprecated_public_i_ps": null, "load_balancer_source_ranges": null, "selector": {"app": "mariadb"}, "type": "ClusterIP", "ports": [{"protocol": "TCP", "node_port": null, "target_port": 3306, "port": 3306, "name": "mariadb"}], "session_affinity": "None"}, "api_version": "v1", "metadata": {"uid": "879866b3-5a1f-11e7-ab9e-0017a4772406", "owner_references": null, "generation": null, "namespace": "osp-dev", "labels": {"app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/api/v1/namespaces/osp-dev/services/mariadb", "resource_version": "6898599", "creation_timestamp": "2017-06-26T03:28:32Z", "annotations": {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}, "name": "mariadb"}}
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_replicas": {
        "aliases": [
            "replicas"
        ], 
        "property_path": [
            "spec", 
            "replicas"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_selector_match_expressions": {
        "aliases": [
            "selector_match_expressions"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_expressions"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector_match_labels": {
        "aliases": [
            "selector_match_labels"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_labels"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_service_name": {
        "aliases": [
            "service_name"
        ], 
        "property_path": [
            "spec", 
            "service_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_metadata_annotations": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_labels": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_name": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "name"
        ]
    }, 
    "spec_template_metadata_namespace": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "namespace"
        ]
    }, 
    "spec_template_spec_active_deadline_seconds": {
        "aliases": [
            "active_deadline_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "active_deadline_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_containers": {
        "aliases": [
            "containers"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "containers"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_dns_policy": {
        "aliases": [
            "dns_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "dns_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_host_ipc": {
        "aliases": [
            "host_ipc"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_ipc"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_network": {
        "aliases": [
            "host_network"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_network"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_pid": {
        "aliases": [
            "host_pid"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_pid"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_hostname": {
        "aliases": [
            "hostname"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "hostname"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_image_pull_secrets": {
        "aliases": [
            "image_pull_secrets"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "image_pull_secrets"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_node_name": {
        "aliases": [
            "node_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_node_selector": {
        "aliases": [
            "node_selector"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_template_spec_restart_policy": {
        "aliases": [
            "restart_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "restart_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_fs_group": {
        "aliases": [
            "security_context_fs_group"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "fs_group"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_run_as_non_root": {
        "aliases": [
            "security_context_run_as_non_root"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_non_root"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_security_context_run_as_user": {
        "aliases": [
            "security_context_run_as_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_user"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_se_linux_options_level": {
        "aliases": [
            "security_context_se_linux_options_level"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "level"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_role": {
        "aliases": [
            "security_context_se_linux_options_role"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "role"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_type": {
        "aliases": [
            "security_context_se_linux_options_type"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_user": {
        "aliases": [
            "security_context_se_linux_options_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "user"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_supplemental_groups": {
        "aliases": [
            "security_context_supplemental_groups"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "supplemental_groups"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_service_account": {
        "aliases": [
            "service_account"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_service_account_name": {
        "aliases": [
            "service_account_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_subdomain": {
        "aliases": [
            "subdomain"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "subdomain"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_termination_grace_period_seconds": {
        "aliases": [
            "termination_grace_period_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "termination_grace_period_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_volumes": {
        "aliases": [
            "volumes"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "volumes"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_volume_claim_templates": {
        "aliases": [
            "volume_claim_templates"
        ], 
        "property_path": [
            "spec", 
            "volume_claim_templates"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "StatefulSet", 
    "spec": {
        "serviceName": "mariadb", 
        "template": {
            "spec": {
                "volumes": [
                    {
                        "name": "mariadb-pvc", 
                        "persistentVolumeClaim": {
                            "claimName": "mariadb"
                        }
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "config.json", 
                                    "key": "kolla-config"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "kolla-config"
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "server.cnf", 
                                    "key": "server-cnf"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "mariadb-config"
                    }
                ], 
                "containers": [
                    {
                        "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", 
                        "volumeMounts": [
                            {
                                "mountPath": "/var/lib/kolla/config_files/", 
                                "name": "kolla-config"
                            }, 
                            {
                                "mountPath": "/etc/my.cnf.d", 
                                "name": "mariadb-config"
                            }, 
                            {
                                "mountPath": "/var/lib/mysql", 
                                "name": "mariadb-pvc"
                            }
                        ], 
                        "ports": [
                            {
                                "containerPort": 3306
                            }
                        ], 
                        "env": [
                            {
                                "name": "TZ", 
                                "value": "UTC"
                            }, 
                            {
                                "name": "KOLLA_CONFIG_STRATEGY", 
                                "value": "COPY_ALWAYS"
                            }, 
                            {
                                "name": "KOLLA_KUBERNETES"
                            }, 
                            {
                                "name": "DB_ROOT_PASSWORD", 
                                "value": "mysqlpass"
                            }
                        ], 
                        "name": "mariadb"
                    }
                ]
            }, 
            "metadata": {
                "labels": {
                    "galera": "enabled", 
                    "app": "mariadb"
                }, 
                "annotations": {
                    "pod.beta.kubernetes.io/init-containers": "[ { \"name\": \"bootstrap\", \"image\": \"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\", \"env\": [ { \"name\": \"TZ\", \"value\": \"UTC\" }, { \"name\": \"KOLLA_KUBERNETES\", \"value\": \"\" }, { \"name\": \"KOLLA_BOOTSTRAP\", \"value\": \"\" }, { \"name\": \"KOLLA_CONFIG_STRATEGY\", \"value\": \"COPY_ALWAYS\" }, { \"name\": \"DB_ROOT_PASSWORD\", \"value\": \"mysqlpass\" } ], \"volumeMounts\": [ { \"name\": \"kolla-config\", \"mountPath\": \"/var/lib/kolla/config_files/\" }, { \"name\": \"mariadb-config\", \"mountPath\": \"/etc/my.cnf.d\" }, { \"name\": \"mariadb-pvc\", \"mountPath\": \"/var/lib/mysql\" } ] } ]"
                }, 
                "name": "mariadb"
            }
        }, 
        "replicas": 1
    }, 
    "metadata": {
        "namespace": "osp-dev", 
        "name": "mariadb"
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"observed_generation": null, "replicas": 0}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "881aba5e-5a1f-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6898601", "creation_timestamp": "2017-06-26T03:28:33Z", "annotations": null, "name": "mariadb"}}
EVENT type: MODIFIED object: {"status": {"observed_generation": null, "replicas": 1}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "881aba5e-5a1f-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6898606", "creation_timestamp": "2017-06-26T03:28:33Z", "annotations": null, "name": "mariadb"}}
STREAM FAILED: HTTPSConnectionPool(host='localhost', port=8443): Read timed out.
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "Service", 
    "spec": {
        "ports": [
            {
                "port": 3306, 
                "name": "mariadb"
            }
        ], 
        "selector": {
            "app": "mariadb"
        }
    }, 
    "metadata": {
        "labels": {
            "app": "mariadb"
        }, 
        "namespace": "osp-dev", 
        "name": "mariadb", 
        "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"
        }
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"load_balancer": {"ingress": null}}, "kind": "Service", "spec": {"cluster_ip": "172.30.125.196", "external_i_ps": null, "load_balancer_ip": null, "external_name": null, "deprecated_public_i_ps": null, "load_balancer_source_ranges": null, "selector": {"app": "mariadb"}, "type": "ClusterIP", "ports": [{"protocol": "TCP", "node_port": null, "target_port": 3306, "port": 3306, "name": "mariadb"}], "session_affinity": "None"}, "api_version": "v1", "metadata": {"uid": "e3828007-5aed-11e7-ab9e-0017a4772406", "owner_references": null, "generation": null, "namespace": "osp-dev", "labels": {"app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/api/v1/namespaces/osp-dev/services/mariadb", "resource_version": "6952272", "creation_timestamp": "2017-06-27T04:05:42Z", "annotations": {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}, "name": "mariadb"}}
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_replicas": {
        "aliases": [
            "replicas"
        ], 
        "property_path": [
            "spec", 
            "replicas"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_selector_match_expressions": {
        "aliases": [
            "selector_match_expressions"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_expressions"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector_match_labels": {
        "aliases": [
            "selector_match_labels"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_labels"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_service_name": {
        "aliases": [
            "service_name"
        ], 
        "property_path": [
            "spec", 
            "service_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_metadata_annotations": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_labels": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_name": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "name"
        ]
    }, 
    "spec_template_metadata_namespace": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "namespace"
        ]
    }, 
    "spec_template_spec_active_deadline_seconds": {
        "aliases": [
            "active_deadline_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "active_deadline_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_containers": {
        "aliases": [
            "containers"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "containers"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_dns_policy": {
        "aliases": [
            "dns_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "dns_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_host_ipc": {
        "aliases": [
            "host_ipc"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_ipc"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_network": {
        "aliases": [
            "host_network"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_network"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_pid": {
        "aliases": [
            "host_pid"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_pid"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_hostname": {
        "aliases": [
            "hostname"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "hostname"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_image_pull_secrets": {
        "aliases": [
            "image_pull_secrets"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "image_pull_secrets"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_node_name": {
        "aliases": [
            "node_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_node_selector": {
        "aliases": [
            "node_selector"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_template_spec_restart_policy": {
        "aliases": [
            "restart_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "restart_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_fs_group": {
        "aliases": [
            "security_context_fs_group"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "fs_group"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_run_as_non_root": {
        "aliases": [
            "security_context_run_as_non_root"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_non_root"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_security_context_run_as_user": {
        "aliases": [
            "security_context_run_as_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_user"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_se_linux_options_level": {
        "aliases": [
            "security_context_se_linux_options_level"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "level"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_role": {
        "aliases": [
            "security_context_se_linux_options_role"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "role"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_type": {
        "aliases": [
            "security_context_se_linux_options_type"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_user": {
        "aliases": [
            "security_context_se_linux_options_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "user"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_supplemental_groups": {
        "aliases": [
            "security_context_supplemental_groups"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "supplemental_groups"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_service_account": {
        "aliases": [
            "service_account"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_service_account_name": {
        "aliases": [
            "service_account_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_subdomain": {
        "aliases": [
            "subdomain"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "subdomain"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_termination_grace_period_seconds": {
        "aliases": [
            "termination_grace_period_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "termination_grace_period_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_volumes": {
        "aliases": [
            "volumes"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "volumes"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_volume_claim_templates": {
        "aliases": [
            "volume_claim_templates"
        ], 
        "property_path": [
            "spec", 
            "volume_claim_templates"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "StatefulSet", 
    "spec": {
        "serviceName": "mariadb", 
        "template": {
            "spec": {
                "volumes": [
                    {
                        "name": "mariadb-pvc", 
                        "persistentVolumeClaim": {
                            "claimName": "mariadb"
                        }
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "config.json", 
                                    "key": "kolla-config"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "kolla-config"
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "server.cnf", 
                                    "key": "server-cnf"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "mariadb-config"
                    }
                ], 
                "containers": [
                    {
                        "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", 
                        "volumeMounts": [
                            {
                                "mountPath": "/var/lib/kolla/config_files/", 
                                "name": "kolla-config"
                            }, 
                            {
                                "mountPath": "/etc/my.cnf.d", 
                                "name": "mariadb-config"
                            }, 
                            {
                                "mountPath": "/var/lib/mysql", 
                                "name": "mariadb-pvc"
                            }
                        ], 
                        "ports": [
                            {
                                "containerPort": 3306
                            }
                        ], 
                        "env": [
                            {
                                "name": "TZ", 
                                "value": "UTC"
                            }, 
                            {
                                "name": "KOLLA_CONFIG_STRATEGY", 
                                "value": "COPY_ALWAYS"
                            }, 
                            {
                                "name": "KOLLA_KUBERNETES"
                            }, 
                            {
                                "name": "DB_ROOT_PASSWORD", 
                                "value": "mysqlpass"
                            }
                        ], 
                        "name": "mariadb"
                    }
                ]
            }, 
            "metadata": {
                "labels": {
                    "galera": "enabled", 
                    "app": "mariadb"
                }, 
                "annotations": {
                    "pod.beta.kubernetes.io/init-containers": "[ { \"name\": \"bootstrap\", \"image\": \"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\", \"env\": [ { \"name\": \"TZ\", \"value\": \"UTC\" }, { \"name\": \"KOLLA_KUBERNETES\", \"value\": \"\" }, { \"name\": \"KOLLA_BOOTSTRAP\", \"value\": \"\" }, { \"name\": \"KOLLA_CONFIG_STRATEGY\", \"value\": \"COPY_ALWAYS\" }, { \"name\": \"DB_ROOT_PASSWORD\", \"value\": \"mysqlpass\" } ], \"volumeMounts\": [ { \"name\": \"kolla-config\", \"mountPath\": \"/var/lib/kolla/config_files/\" }, { \"name\": \"mariadb-config\", \"mountPath\": \"/etc/my.cnf.d\" }, { \"name\": \"mariadb-pvc\", \"mountPath\": \"/var/lib/mysql\" } ] } ]"
                }, 
                "name": "mariadb"
            }
        }, 
        "replicas": 1
    }, 
    "metadata": {
        "namespace": "osp-dev", 
        "name": "mariadb"
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"observed_generation": null, "replicas": 0}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "e4098474-5aed-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6952274", "creation_timestamp": "2017-06-27T04:05:43Z", "annotations": null, "name": "mariadb"}}
EVENT type: MODIFIED object: {"status": {"observed_generation": null, "replicas": 1}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "e4098474-5aed-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6952279", "creation_timestamp": "2017-06-27T04:05:43Z", "annotations": null, "name": "mariadb"}}
STREAM FAILED: HTTPSConnectionPool(host='localhost', port=8443): Read timed out.
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "Service", 
    "spec": {
        "ports": [
            {
                "port": 3306, 
                "name": "mariadb"
            }
        ], 
        "selector": {
            "app": "mariadb"
        }
    }, 
    "metadata": {
        "labels": {
            "app": "mariadb"
        }, 
        "namespace": "osp-dev", 
        "name": "mariadb", 
        "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"
        }
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"load_balancer": {"ingress": null}}, "kind": "Service", "spec": {"cluster_ip": "172.30.74.156", "external_i_ps": null, "load_balancer_ip": null, "external_name": null, "deprecated_public_i_ps": null, "load_balancer_source_ranges": null, "selector": {"app": "mariadb"}, "type": "ClusterIP", "ports": [{"protocol": "TCP", "node_port": null, "target_port": 3306, "port": 3306, "name": "mariadb"}], "session_affinity": "None"}, "api_version": "v1", "metadata": {"uid": "2b8f6f98-5aef-11e7-ab9e-0017a4772406", "owner_references": null, "generation": null, "namespace": "osp-dev", "labels": {"app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/api/v1/namespaces/osp-dev/services/mariadb", "resource_version": "6952718", "creation_timestamp": "2017-06-27T04:14:53Z", "annotations": {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}, "name": "mariadb"}}
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_replicas": {
        "aliases": [
            "replicas"
        ], 
        "property_path": [
            "spec", 
            "replicas"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_selector_match_expressions": {
        "aliases": [
            "selector_match_expressions"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_expressions"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector_match_labels": {
        "aliases": [
            "selector_match_labels"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_labels"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_service_name": {
        "aliases": [
            "service_name"
        ], 
        "property_path": [
            "spec", 
            "service_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_metadata_annotations": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_labels": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_name": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "name"
        ]
    }, 
    "spec_template_metadata_namespace": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "namespace"
        ]
    }, 
    "spec_template_spec_active_deadline_seconds": {
        "aliases": [
            "active_deadline_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "active_deadline_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_containers": {
        "aliases": [
            "containers"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "containers"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_dns_policy": {
        "aliases": [
            "dns_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "dns_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_host_ipc": {
        "aliases": [
            "host_ipc"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_ipc"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_network": {
        "aliases": [
            "host_network"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_network"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_pid": {
        "aliases": [
            "host_pid"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_pid"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_hostname": {
        "aliases": [
            "hostname"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "hostname"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_image_pull_secrets": {
        "aliases": [
            "image_pull_secrets"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "image_pull_secrets"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_node_name": {
        "aliases": [
            "node_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_node_selector": {
        "aliases": [
            "node_selector"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_template_spec_restart_policy": {
        "aliases": [
            "restart_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "restart_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_fs_group": {
        "aliases": [
            "security_context_fs_group"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "fs_group"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_run_as_non_root": {
        "aliases": [
            "security_context_run_as_non_root"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_non_root"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_security_context_run_as_user": {
        "aliases": [
            "security_context_run_as_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_user"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_se_linux_options_level": {
        "aliases": [
            "security_context_se_linux_options_level"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "level"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_role": {
        "aliases": [
            "security_context_se_linux_options_role"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "role"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_type": {
        "aliases": [
            "security_context_se_linux_options_type"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_user": {
        "aliases": [
            "security_context_se_linux_options_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "user"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_supplemental_groups": {
        "aliases": [
            "security_context_supplemental_groups"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "supplemental_groups"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_service_account": {
        "aliases": [
            "service_account"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_service_account_name": {
        "aliases": [
            "service_account_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_subdomain": {
        "aliases": [
            "subdomain"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "subdomain"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_termination_grace_period_seconds": {
        "aliases": [
            "termination_grace_period_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "termination_grace_period_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_volumes": {
        "aliases": [
            "volumes"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "volumes"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_volume_claim_templates": {
        "aliases": [
            "volume_claim_templates"
        ], 
        "property_path": [
            "spec", 
            "volume_claim_templates"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "StatefulSet", 
    "spec": {
        "serviceName": "mariadb", 
        "template": {
            "spec": {
                "volumes": [
                    {
                        "name": "mariadb-pvc", 
                        "persistentVolumeClaim": {
                            "claimName": "mariadb"
                        }
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "config.json", 
                                    "key": "kolla-config"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "kolla-config"
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "server.cnf", 
                                    "key": "server-cnf"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "mariadb-config"
                    }
                ], 
                "containers": [
                    {
                        "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", 
                        "volumeMounts": [
                            {
                                "mountPath": "/var/lib/kolla/config_files/", 
                                "name": "kolla-config"
                            }, 
                            {
                                "mountPath": "/etc/my.cnf.d", 
                                "name": "mariadb-config"
                            }, 
                            {
                                "mountPath": "/var/lib/mysql", 
                                "name": "mariadb-pvc"
                            }
                        ], 
                        "ports": [
                            {
                                "containerPort": 3306
                            }
                        ], 
                        "env": [
                            {
                                "name": "TZ", 
                                "value": "UTC"
                            }, 
                            {
                                "name": "KOLLA_CONFIG_STRATEGY", 
                                "value": "COPY_ALWAYS"
                            }, 
                            {
                                "name": "KOLLA_KUBERNETES"
                            }, 
                            {
                                "name": "DB_ROOT_PASSWORD", 
                                "value": "mysqlpass"
                            }
                        ], 
                        "name": "mariadb"
                    }
                ]
            }, 
            "metadata": {
                "labels": {
                    "galera": "enabled", 
                    "app": "mariadb"
                }, 
                "annotations": {
                    "pod.beta.kubernetes.io/init-containers": "[ { \"name\": \"bootstrap\", \"image\": \"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\", \"env\": [ { \"name\": \"TZ\", \"value\": \"UTC\" }, { \"name\": \"KOLLA_KUBERNETES\", \"value\": \"\" }, { \"name\": \"KOLLA_BOOTSTRAP\", \"value\": \"\" }, { \"name\": \"KOLLA_CONFIG_STRATEGY\", \"value\": \"COPY_ALWAYS\" }, { \"name\": \"DB_ROOT_PASSWORD\", \"value\": \"mysqlpass\" } ], \"volumeMounts\": [ { \"name\": \"kolla-config\", \"mountPath\": \"/var/lib/kolla/config_files/\" }, { \"name\": \"mariadb-config\", \"mountPath\": \"/etc/my.cnf.d\" }, { \"name\": \"mariadb-pvc\", \"mountPath\": \"/var/lib/mysql\" } ] } ]"
                }, 
                "name": "mariadb"
            }
        }, 
        "replicas": 1
    }, 
    "metadata": {
        "namespace": "osp-dev", 
        "name": "mariadb"
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"observed_generation": null, "replicas": 0}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "2c14e735-5aef-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6952721", "creation_timestamp": "2017-06-27T04:14:54Z", "annotations": null, "name": "mariadb"}}
EVENT type: MODIFIED object: {"status": {"observed_generation": null, "replicas": 1}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "2c14e735-5aef-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6952726", "creation_timestamp": "2017-06-27T04:14:54Z", "annotations": null, "name": "mariadb"}}
STREAM FAILED: HTTPSConnectionPool(host='localhost', port=8443): Read timed out.
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "Service", 
    "spec": {
        "ports": [
            {
                "port": 3306, 
                "name": "mariadb"
            }
        ], 
        "selector": {
            "app": "mariadb"
        }
    }, 
    "metadata": {
        "labels": {
            "app": "mariadb"
        }, 
        "namespace": "osp-dev", 
        "name": "mariadb", 
        "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"
        }
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"load_balancer": {"ingress": null}}, "kind": "Service", "spec": {"cluster_ip": "172.30.37.36", "external_i_ps": null, "load_balancer_ip": null, "external_name": null, "deprecated_public_i_ps": null, "load_balancer_source_ranges": null, "selector": {"app": "mariadb"}, "type": "ClusterIP", "ports": [{"protocol": "TCP", "node_port": null, "target_port": 3306, "port": 3306, "name": "mariadb"}], "session_affinity": "None"}, "api_version": "v1", "metadata": {"uid": "b1149265-5b39-11e7-ab9e-0017a4772406", "owner_references": null, "generation": null, "namespace": "osp-dev", "labels": {"app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/api/v1/namespaces/osp-dev/services/mariadb", "resource_version": "6972377", "creation_timestamp": "2017-06-27T13:08:20Z", "annotations": {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}, "name": "mariadb"}}
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_replicas": {
        "aliases": [
            "replicas"
        ], 
        "property_path": [
            "spec", 
            "replicas"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_selector_match_expressions": {
        "aliases": [
            "selector_match_expressions"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_expressions"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector_match_labels": {
        "aliases": [
            "selector_match_labels"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_labels"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_service_name": {
        "aliases": [
            "service_name"
        ], 
        "property_path": [
            "spec", 
            "service_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_metadata_annotations": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_labels": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_name": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "name"
        ]
    }, 
    "spec_template_metadata_namespace": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "namespace"
        ]
    }, 
    "spec_template_spec_active_deadline_seconds": {
        "aliases": [
            "active_deadline_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "active_deadline_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_containers": {
        "aliases": [
            "containers"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "containers"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_dns_policy": {
        "aliases": [
            "dns_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "dns_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_host_ipc": {
        "aliases": [
            "host_ipc"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_ipc"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_network": {
        "aliases": [
            "host_network"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_network"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_pid": {
        "aliases": [
            "host_pid"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_pid"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_hostname": {
        "aliases": [
            "hostname"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "hostname"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_image_pull_secrets": {
        "aliases": [
            "image_pull_secrets"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "image_pull_secrets"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_node_name": {
        "aliases": [
            "node_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_node_selector": {
        "aliases": [
            "node_selector"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_template_spec_restart_policy": {
        "aliases": [
            "restart_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "restart_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_fs_group": {
        "aliases": [
            "security_context_fs_group"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "fs_group"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_run_as_non_root": {
        "aliases": [
            "security_context_run_as_non_root"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_non_root"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_security_context_run_as_user": {
        "aliases": [
            "security_context_run_as_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_user"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_se_linux_options_level": {
        "aliases": [
            "security_context_se_linux_options_level"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "level"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_role": {
        "aliases": [
            "security_context_se_linux_options_role"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "role"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_type": {
        "aliases": [
            "security_context_se_linux_options_type"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_user": {
        "aliases": [
            "security_context_se_linux_options_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "user"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_supplemental_groups": {
        "aliases": [
            "security_context_supplemental_groups"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "supplemental_groups"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_service_account": {
        "aliases": [
            "service_account"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_service_account_name": {
        "aliases": [
            "service_account_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_subdomain": {
        "aliases": [
            "subdomain"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "subdomain"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_termination_grace_period_seconds": {
        "aliases": [
            "termination_grace_period_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "termination_grace_period_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_volumes": {
        "aliases": [
            "volumes"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "volumes"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_volume_claim_templates": {
        "aliases": [
            "volume_claim_templates"
        ], 
        "property_path": [
            "spec", 
            "volume_claim_templates"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "StatefulSet", 
    "spec": {
        "serviceName": "mariadb", 
        "template": {
            "spec": {
                "volumes": [
                    {
                        "name": "mariadb-pvc", 
                        "persistentVolumeClaim": {
                            "claimName": "mariadb"
                        }
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "config.json", 
                                    "key": "kolla-config"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "kolla-config"
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "server.cnf", 
                                    "key": "server-cnf"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "mariadb-config"
                    }
                ], 
                "containers": [
                    {
                        "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", 
                        "volumeMounts": [
                            {
                                "mountPath": "/var/lib/kolla/config_files/", 
                                "name": "kolla-config"
                            }, 
                            {
                                "mountPath": "/etc/my.cnf.d", 
                                "name": "mariadb-config"
                            }, 
                            {
                                "mountPath": "/var/lib/mysql", 
                                "name": "mariadb-pvc"
                            }
                        ], 
                        "ports": [
                            {
                                "containerPort": 3306
                            }
                        ], 
                        "env": [
                            {
                                "name": "TZ", 
                                "value": "UTC"
                            }, 
                            {
                                "name": "KOLLA_CONFIG_STRATEGY", 
                                "value": "COPY_ALWAYS"
                            }, 
                            {
                                "name": "KOLLA_KUBERNETES"
                            }, 
                            {
                                "name": "DB_ROOT_PASSWORD", 
                                "value": "mysqlpass"
                            }
                        ], 
                        "name": "mariadb"
                    }
                ]
            }, 
            "metadata": {
                "labels": {
                    "galera": "enabled", 
                    "app": "mariadb"
                }, 
                "annotations": {
                    "pod.beta.kubernetes.io/init-containers": "[ { \"name\": \"bootstrap\", \"image\": \"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\", \"env\": [ { \"name\": \"TZ\", \"value\": \"UTC\" }, { \"name\": \"KOLLA_KUBERNETES\", \"value\": \"\" }, { \"name\": \"KOLLA_BOOTSTRAP\", \"value\": \"\" }, { \"name\": \"KOLLA_CONFIG_STRATEGY\", \"value\": \"COPY_ALWAYS\" }, { \"name\": \"DB_ROOT_PASSWORD\", \"value\": \"mysqlpass\" } ], \"volumeMounts\": [ { \"name\": \"kolla-config\", \"mountPath\": \"/var/lib/kolla/config_files/\" }, { \"name\": \"mariadb-config\", \"mountPath\": \"/etc/my.cnf.d\" }, { \"name\": \"mariadb-pvc\", \"mountPath\": \"/var/lib/mysql\" } ] } ]"
                }, 
                "name": "mariadb"
            }
        }, 
        "replicas": 1
    }, 
    "metadata": {
        "namespace": "osp-dev", 
        "name": "mariadb"
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"observed_generation": null, "replicas": 0}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "b1a0a1f7-5b39-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6972380", "creation_timestamp": "2017-06-27T13:08:20Z", "annotations": null, "name": "mariadb"}}
EVENT type: MODIFIED object: {"status": {"observed_generation": null, "replicas": 1}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "b1a0a1f7-5b39-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6972386", "creation_timestamp": "2017-06-27T13:08:20Z", "annotations": null, "name": "mariadb"}}
STREAM FAILED: HTTPSConnectionPool(host='localhost', port=8443): Read timed out.
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "Service", 
    "spec": {
        "ports": [
            {
                "port": 3306, 
                "name": "mariadb"
            }
        ], 
        "selector": {
            "app": "mariadb"
        }
    }, 
    "metadata": {
        "labels": {
            "app": "mariadb"
        }, 
        "namespace": "osp-dev", 
        "name": "mariadb", 
        "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"
        }
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"load_balancer": {"ingress": null}}, "kind": "Service", "spec": {"cluster_ip": "172.30.195.223", "external_i_ps": null, "load_balancer_ip": null, "external_name": null, "deprecated_public_i_ps": null, "load_balancer_source_ranges": null, "selector": {"app": "mariadb"}, "type": "ClusterIP", "ports": [{"protocol": "TCP", "node_port": null, "target_port": 3306, "port": 3306, "name": "mariadb"}], "session_affinity": "None"}, "api_version": "v1", "metadata": {"uid": "ed1b57f5-5b41-11e7-ab9e-0017a4772406", "owner_references": null, "generation": null, "namespace": "osp-dev", "labels": {"app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/api/v1/namespaces/osp-dev/services/mariadb", "resource_version": "6974703", "creation_timestamp": "2017-06-27T14:07:16Z", "annotations": {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}, "name": "mariadb"}}
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_replicas": {
        "aliases": [
            "replicas"
        ], 
        "property_path": [
            "spec", 
            "replicas"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_selector_match_expressions": {
        "aliases": [
            "selector_match_expressions"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_expressions"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector_match_labels": {
        "aliases": [
            "selector_match_labels"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_labels"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_service_name": {
        "aliases": [
            "service_name"
        ], 
        "property_path": [
            "spec", 
            "service_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_metadata_annotations": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_labels": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_name": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "name"
        ]
    }, 
    "spec_template_metadata_namespace": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "namespace"
        ]
    }, 
    "spec_template_spec_active_deadline_seconds": {
        "aliases": [
            "active_deadline_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "active_deadline_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_containers": {
        "aliases": [
            "containers"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "containers"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_dns_policy": {
        "aliases": [
            "dns_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "dns_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_host_ipc": {
        "aliases": [
            "host_ipc"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_ipc"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_network": {
        "aliases": [
            "host_network"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_network"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_pid": {
        "aliases": [
            "host_pid"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_pid"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_hostname": {
        "aliases": [
            "hostname"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "hostname"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_image_pull_secrets": {
        "aliases": [
            "image_pull_secrets"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "image_pull_secrets"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_node_name": {
        "aliases": [
            "node_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_node_selector": {
        "aliases": [
            "node_selector"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_template_spec_restart_policy": {
        "aliases": [
            "restart_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "restart_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_fs_group": {
        "aliases": [
            "security_context_fs_group"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "fs_group"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_run_as_non_root": {
        "aliases": [
            "security_context_run_as_non_root"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_non_root"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_security_context_run_as_user": {
        "aliases": [
            "security_context_run_as_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_user"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_se_linux_options_level": {
        "aliases": [
            "security_context_se_linux_options_level"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "level"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_role": {
        "aliases": [
            "security_context_se_linux_options_role"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "role"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_type": {
        "aliases": [
            "security_context_se_linux_options_type"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_user": {
        "aliases": [
            "security_context_se_linux_options_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "user"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_supplemental_groups": {
        "aliases": [
            "security_context_supplemental_groups"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "supplemental_groups"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_service_account": {
        "aliases": [
            "service_account"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_service_account_name": {
        "aliases": [
            "service_account_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_subdomain": {
        "aliases": [
            "subdomain"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "subdomain"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_termination_grace_period_seconds": {
        "aliases": [
            "termination_grace_period_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "termination_grace_period_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_volumes": {
        "aliases": [
            "volumes"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "volumes"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_volume_claim_templates": {
        "aliases": [
            "volume_claim_templates"
        ], 
        "property_path": [
            "spec", 
            "volume_claim_templates"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "StatefulSet", 
    "spec": {
        "serviceName": "mariadb", 
        "template": {
            "spec": {
                "volumes": [
                    {
                        "name": "mariadb-pvc", 
                        "persistentVolumeClaim": {
                            "claimName": "mariadb"
                        }
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "config.json", 
                                    "key": "kolla-config"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "kolla-config"
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "server.cnf", 
                                    "key": "server-cnf"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "mariadb-config"
                    }
                ], 
                "containers": [
                    {
                        "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", 
                        "volumeMounts": [
                            {
                                "mountPath": "/var/lib/kolla/config_files/", 
                                "name": "kolla-config"
                            }, 
                            {
                                "mountPath": "/etc/my.cnf.d", 
                                "name": "mariadb-config"
                            }, 
                            {
                                "mountPath": "/var/lib/mysql", 
                                "name": "mariadb-pvc"
                            }
                        ], 
                        "ports": [
                            {
                                "containerPort": 3306
                            }
                        ], 
                        "env": [
                            {
                                "name": "TZ", 
                                "value": "UTC"
                            }, 
                            {
                                "name": "KOLLA_CONFIG_STRATEGY", 
                                "value": "COPY_ALWAYS"
                            }, 
                            {
                                "name": "KOLLA_KUBERNETES"
                            }, 
                            {
                                "name": "DB_ROOT_PASSWORD", 
                                "value": "mysqlpass"
                            }
                        ], 
                        "name": "mariadb"
                    }
                ]
            }, 
            "metadata": {
                "labels": {
                    "galera": "enabled", 
                    "app": "mariadb"
                }, 
                "annotations": {
                    "pod.beta.kubernetes.io/init-containers": "[ { \"name\": \"bootstrap\", \"image\": \"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\", \"env\": [ { \"name\": \"TZ\", \"value\": \"UTC\" }, { \"name\": \"KOLLA_KUBERNETES\", \"value\": \"\" }, { \"name\": \"KOLLA_BOOTSTRAP\", \"value\": \"\" }, { \"name\": \"KOLLA_CONFIG_STRATEGY\", \"value\": \"COPY_ALWAYS\" }, { \"name\": \"DB_ROOT_PASSWORD\", \"value\": \"mysqlpass\" } ], \"volumeMounts\": [ { \"name\": \"kolla-config\", \"mountPath\": \"/var/lib/kolla/config_files/\" }, { \"name\": \"mariadb-config\", \"mountPath\": \"/etc/my.cnf.d\" }, { \"name\": \"mariadb-pvc\", \"mountPath\": \"/var/lib/mysql\" } ] } ]"
                }, 
                "name": "mariadb"
            }
        }, 
        "replicas": 1
    }, 
    "metadata": {
        "namespace": "osp-dev", 
        "name": "mariadb"
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"observed_generation": null, "replicas": 0}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "eda21e15-5b41-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6974705", "creation_timestamp": "2017-06-27T14:07:17Z", "annotations": null, "name": "mariadb"}}
EVENT type: MODIFIED object: {"status": {"observed_generation": null, "replicas": 1}, "kind": "StatefulSet", "spec": {"volume_claim_templates": null, "selector": {"match_expressions": null, "match_labels": {"galera": "enabled", "app": "mariadb"}}, "replicas": 1, "template": {"spec": {"hostname": null, "security_context": {"run_as_non_root": null, "run_as_user": null, "se_linux_options": null, "supplemental_groups": null, "fs_group": null}, "image_pull_secrets": null, "service_account_name": null, "dns_policy": "ClusterFirst", "termination_grace_period_seconds": 30, "restart_policy": "Always", "node_name": null, "active_deadline_seconds": null, "host_ipc": null, "service_account": null, "host_pid": null, "host_network": null, "subdomain": null, "volumes": [{"gce_persistent_disk": null, "persistent_volume_claim": {"read_only": null, "claim_name": "mariadb"}, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-pvc", "vsphere_volume": null, "config_map": null, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "kolla-config", "vsphere_volume": null, "config_map": {"items": [{"path": "config.json", "mode": null, "key": "kolla-config"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}, {"gce_persistent_disk": null, "persistent_volume_claim": null, "azure_disk": null, "glusterfs": null, "flocker": null, "aws_elastic_block_store": null, "azure_file": null, "iscsi": null, "flex_volume": null, "secret": null, "photon_persistent_disk": null, "empty_dir": null, "fc": null, "cinder": null, "git_repo": null, "rbd": null, "name": "mariadb-config", "vsphere_volume": null, "config_map": {"items": [{"path": "server.cnf", "mode": null, "key": "server-cnf"}], "default_mode": 420, "name": "mariadb"}, "quobyte": null, "nfs": null, "host_path": null, "cephfs": null, "downward_api": null}], "containers": [{"image_pull_policy": "Always", "tty": null, "stdin": null, "stdin_once": null, "name": "mariadb", "env": [{"value_from": null, "name": "TZ", "value": "UTC"}, {"value_from": null, "name": "KOLLA_CONFIG_STRATEGY", "value": "COPY_ALWAYS"}, {"value_from": null, "name": "KOLLA_KUBERNETES", "value": null}, {"value_from": null, "name": "DB_ROOT_PASSWORD", "value": "mysqlpass"}], "image": "172.30.202.25:5000/osp-dev/rhel-binary-mariadb", "args": null, "volume_mounts": [{"read_only": null, "sub_path": null, "mount_path": "/var/lib/kolla/config_files/", "name": "kolla-config"}, {"read_only": null, "sub_path": null, "mount_path": "/etc/my.cnf.d", "name": "mariadb-config"}, {"read_only": null, "sub_path": null, "mount_path": "/var/lib/mysql", "name": "mariadb-pvc"}], "lifecycle": null, "working_dir": null, "command": null, "security_context": null, "termination_message_path": "/dev/termination-log", "readiness_probe": null, "liveness_probe": null, "ports": [{"host_port": null, "container_port": 3306, "protocol": "TCP", "host_ip": null, "name": null}], "resources": {"requests": null, "limits": null}}], "node_selector": null}, "metadata": {"uid": null, "owner_references": null, "generation": null, "namespace": null, "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": null, "resource_version": null, "creation_timestamp": {}, "annotations": {"pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]", "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"bootstrap\",\"image\":\"172.30.202.25:5000/osp-dev/rhel-binary-mariadb\",\"env\":[{\"name\":\"TZ\",\"value\":\"UTC\"},{\"name\":\"KOLLA_KUBERNETES\"},{\"name\":\"KOLLA_BOOTSTRAP\"},{\"name\":\"KOLLA_CONFIG_STRATEGY\",\"value\":\"COPY_ALWAYS\"},{\"name\":\"DB_ROOT_PASSWORD\",\"value\":\"mysqlpass\"}],\"resources\":{},\"volumeMounts\":[{\"name\":\"kolla-config\",\"mountPath\":\"/var/lib/kolla/config_files/\"},{\"name\":\"mariadb-config\",\"mountPath\":\"/etc/my.cnf.d\"},{\"name\":\"mariadb-pvc\",\"mountPath\":\"/var/lib/mysql\"}]}]"}, "name": "mariadb"}}, "service_name": "mariadb"}, "api_version": "apps/v1beta1", "metadata": {"uid": "eda21e15-5b41-11e7-ab9e-0017a4772406", "owner_references": null, "generation": 1, "namespace": "osp-dev", "labels": {"galera": "enabled", "app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/apis/apps/v1beta1/namespaces/osp-dev/statefulsets/mariadb", "resource_version": "6974711", "creation_timestamp": "2017-06-27T14:07:17Z", "annotations": null, "name": "mariadb"}}
STREAM FAILED: HTTPSConnectionPool(host='localhost', port=8443): Read timed out.
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "Service", 
    "spec": {
        "ports": [
            {
                "port": 3306, 
                "name": "mariadb"
            }
        ], 
        "selector": {
            "app": "mariadb"
        }
    }, 
    "metadata": {
        "labels": {
            "app": "mariadb"
        }, 
        "namespace": "tripleo", 
        "name": "mariadb", 
        "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"
        }
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"load_balancer": {"ingress": null}}, "kind": "Service", "spec": {"cluster_ip": "172.30.161.5", "external_i_ps": null, "load_balancer_ip": null, "external_name": null, "deprecated_public_i_ps": null, "load_balancer_source_ranges": null, "selector": {"app": "mariadb"}, "type": "ClusterIP", "ports": [{"protocol": "TCP", "node_port": null, "target_port": 3306, "port": 3306, "name": "mariadb"}], "session_affinity": "None"}, "api_version": "v1", "metadata": {"uid": "e24bd11a-8474-11e7-8c62-0017a4772406", "owner_references": null, "generation": null, "namespace": "tripleo", "labels": {"app": "mariadb"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/api/v1/namespaces/tripleo/services/mariadb", "resource_version": "9767797", "creation_timestamp": "2017-08-19T00:25:20Z", "annotations": {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}, "name": "mariadb"}}
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_replicas": {
        "aliases": [
            "replicas"
        ], 
        "property_path": [
            "spec", 
            "replicas"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_selector_match_expressions": {
        "aliases": [
            "selector_match_expressions"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_expressions"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector_match_labels": {
        "aliases": [
            "selector_match_labels"
        ], 
        "property_path": [
            "spec", 
            "selector", 
            "match_labels"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_service_name": {
        "aliases": [
            "service_name"
        ], 
        "property_path": [
            "spec", 
            "service_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_metadata_annotations": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_labels": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "spec_template_metadata_name": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "name"
        ]
    }, 
    "spec_template_metadata_namespace": {
        "property_path": [
            "spec", 
            "template", 
            "metadata", 
            "namespace"
        ]
    }, 
    "spec_template_spec_active_deadline_seconds": {
        "aliases": [
            "active_deadline_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "active_deadline_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_containers": {
        "aliases": [
            "containers"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "containers"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_dns_policy": {
        "aliases": [
            "dns_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "dns_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_host_ipc": {
        "aliases": [
            "host_ipc"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_ipc"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_network": {
        "aliases": [
            "host_network"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_network"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_host_pid": {
        "aliases": [
            "host_pid"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "host_pid"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_hostname": {
        "aliases": [
            "hostname"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "hostname"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_image_pull_secrets": {
        "aliases": [
            "image_pull_secrets"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "image_pull_secrets"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_node_name": {
        "aliases": [
            "node_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_node_selector": {
        "aliases": [
            "node_selector"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "node_selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_template_spec_restart_policy": {
        "aliases": [
            "restart_policy"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "restart_policy"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_fs_group": {
        "aliases": [
            "security_context_fs_group"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "fs_group"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_run_as_non_root": {
        "aliases": [
            "security_context_run_as_non_root"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_non_root"
        ], 
        "required": false, 
        "type": "bool"
    }, 
    "spec_template_spec_security_context_run_as_user": {
        "aliases": [
            "security_context_run_as_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "run_as_user"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_security_context_se_linux_options_level": {
        "aliases": [
            "security_context_se_linux_options_level"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "level"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_role": {
        "aliases": [
            "security_context_se_linux_options_role"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "role"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_type": {
        "aliases": [
            "security_context_se_linux_options_type"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_se_linux_options_user": {
        "aliases": [
            "security_context_se_linux_options_user"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "se_linux_options", 
            "user"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_security_context_supplemental_groups": {
        "aliases": [
            "security_context_supplemental_groups"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "security_context", 
            "supplemental_groups"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_template_spec_service_account": {
        "aliases": [
            "service_account"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_service_account_name": {
        "aliases": [
            "service_account_name"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "service_account_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_subdomain": {
        "aliases": [
            "subdomain"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "subdomain"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_template_spec_termination_grace_period_seconds": {
        "aliases": [
            "termination_grace_period_seconds"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "termination_grace_period_seconds"
        ], 
        "required": false, 
        "type": "int"
    }, 
    "spec_template_spec_volumes": {
        "aliases": [
            "volumes"
        ], 
        "property_path": [
            "spec", 
            "template", 
            "spec", 
            "volumes"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_volume_claim_templates": {
        "aliases": [
            "volume_claim_templates"
        ], 
        "property_path": [
            "spec", 
            "volume_claim_templates"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "StatefulSet", 
    "spec": {
        "serviceName": "mariadb", 
        "template": {
            "spec": {
                "volumes": [
                    {
                        "name": "mariadb-pvc", 
                        "persistentVolumeClaim": {
                            "claimName": "mariadb"
                        }
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "config.json", 
                                    "key": "kolla-config"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "kolla-config"
                    }, 
                    {
                        "configMap": {
                            "items": [
                                {
                                    "path": "server.cnf", 
                                    "key": "server-cnf"
                                }
                            ], 
                            "name": "mariadb"
                        }, 
                        "name": "mariadb-config"
                    }
                ], 
                "containers": [
                    {
                        "image": "tripleoupstream/centos-binary-mariadb", 
                        "volumeMounts": [
                            {
                                "mountPath": "/var/lib/kolla/config_files/", 
                                "name": "kolla-config"
                            }, 
                            {
                                "mountPath": "/etc/my.cnf.d", 
                                "name": "mariadb-config"
                            }, 
                            {
                                "mountPath": "/var/lib/mysql", 
                                "name": "mariadb-pvc"
                            }
                        ], 
                        "ports": [
                            {
                                "containerPort": 3306
                            }
                        ], 
                        "env": [
                            {
                                "name": "TZ", 
                                "value": "UTC"
                            }, 
                            {
                                "name": "KOLLA_CONFIG_STRATEGY", 
                                "value": "COPY_ALWAYS"
                            }, 
                            {
                                "name": "KOLLA_KUBERNETES"
                            }, 
                            {
                                "name": "DB_ROOT_PASSWORD", 
                                "value": "mysqlpass"
                            }
                        ], 
                        "name": "mariadb"
                    }
                ]
            }, 
            "metadata": {
                "labels": {
                    "galera": "enabled", 
                    "app": "mariadb"
                }, 
                "annotations": {
                    "pod.beta.kubernetes.io/init-containers": "[ { \"name\": \"bootstrap\", \"image\": \"tripleoupstream/centos-binary-mariadb\" \"env\": [ { \"name\": \"TZ\", \"value\": \"UTC\" }, { \"name\": \"KOLLA_KUBERNETES\", \"value\": \"\" }, { \"name\": \"KOLLA_BOOTSTRAP\", \"value\": \"\" }, { \"name\": \"KOLLA_CONFIG_STRATEGY\", \"value\": \"COPY_ALWAYS\" }, { \"name\": \"DB_ROOT_PASSWORD\", \"value\": \"mysqlpass\" } ], \"volumeMounts\": [ { \"name\": \"kolla-config\", \"mountPath\": \"/var/lib/kolla/config_files/\" }, { \"name\": \"mariadb-config\", \"mountPath\": \"/etc/my.cnf.d\" }, { \"name\": \"mariadb-pvc\", \"mountPath\": \"/var/lib/mysql\" } ] } ]"
                }, 
                "name": "mariadb"
            }
        }, 
        "replicas": 1
    }, 
    "metadata": {
        "namespace": "tripleo", 
        "name": "mariadb"
    }
}
Starting create object
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
set_obj_attribute V1Service, ["metadata", "labels"] to {"app": "mariadb"}
set_obj_attribute V1ObjectMeta, ["labels"] to {"app": "mariadb"}
set_obj_attribute V1Service, ["spec", "selector"] to {"app": "mariadb"}
set_obj_attribute V1ServiceSpec, ["selector"] to {"app": "mariadb"}
set_obj_attribute V1Service, ["spec", "selector"] to {"app": "mariadb"}
set_obj_attribute V1ServiceSpec, ["selector"] to {"app": "mariadb"}
set_obj_attribute V1Service, ["metadata", "name"] to "mariadb"
set_obj_attribute V1ObjectMeta, ["name"] to "mariadb"
set_obj_attribute V1Service, ["metadata", "namespace"] to "tripleo"
set_obj_attribute V1ObjectMeta, ["namespace"] to "tripleo"
set_obj_attribute V1Service, ["spec", "ports"] to [{"port": 3306, "name": "mariadb"}]
set_obj_attribute V1ServiceSpec, ["ports"] to [{"port": 3306, "name": "mariadb"}]
set_obj_attribute V1Service, ["metadata", "annotations"] to {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}
set_obj_attribute V1ObjectMeta, ["annotations"] to {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}
set_obj_attribute V1Service, ["spec", "ports"] to [{"port": 3306, "name": "mariadb"}]
set_obj_attribute V1ServiceSpec, ["ports"] to [{"port": 3306, "name": "mariadb"}]
Object from params:
{
    "status": {
        "load_balancer": {
            "ingress": null
        }
    }, 
    "kind": "Service", 
    "spec": {
        "cluster_ip": "172.30.161.5", 
        "external_i_ps": null, 
        "load_balancer_ip": null, 
        "external_name": null, 
        "deprecated_public_i_ps": null, 
        "load_balancer_source_ranges": null, 
        "selector": {
            "app": "mariadb"
        }, 
        "type": "ClusterIP", 
        "ports": [
            {
                "target_port": 3306, 
                "protocol": "TCP", 
                "port": 3306, 
                "name": "mariadb", 
                "node_port": null
            }
        ], 
        "session_affinity": "None"
    }, 
    "api_version": "v1", 
    "metadata": {
        "uid": "e24bd11a-8474-11e7-8c62-0017a4772406", 
        "owner_references": null, 
        "generation": null, 
        "namespace": "tripleo", 
        "labels": {
            "app": "mariadb"
        }, 
        "generate_name": null, 
        "deletion_timestamp": null, 
        "cluster_name": null, 
        "finalizers": null, 
        "deletion_grace_period_seconds": null, 
        "self_link": "/api/v1/namespaces/tripleo/services/mariadb", 
        "resource_version": "9767797", 
        "creation_timestamp": "2017-08-19T00:25:20Z", 
        "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"
        }, 
        "name": "mariadb"
    }
}
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
set_obj_attribute V1Service, ["metadata", "labels"] to {"app": "mariadb"}
set_obj_attribute V1ObjectMeta, ["labels"] to {"app": "mariadb"}
set_obj_attribute V1Service, ["spec", "selector"] to {"app": "mariadb"}
set_obj_attribute V1ServiceSpec, ["selector"] to {"app": "mariadb"}
set_obj_attribute V1Service, ["spec", "selector"] to {"app": "mariadb"}
set_obj_attribute V1ServiceSpec, ["selector"] to {"app": "mariadb"}
set_obj_attribute V1Service, ["metadata", "name"] to "mariadb"
set_obj_attribute V1ObjectMeta, ["name"] to "mariadb"
set_obj_attribute V1Service, ["metadata", "namespace"] to "tripleo"
set_obj_attribute V1ObjectMeta, ["namespace"] to "tripleo"
set_obj_attribute V1Service, ["spec", "ports"] to [{"port": 3306, "name": "mariadb"}]
set_obj_attribute V1ServiceSpec, ["ports"] to [{"port": 3306, "name": "mariadb"}]
set_obj_attribute V1Service, ["metadata", "annotations"] to {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}
set_obj_attribute V1ObjectMeta, ["annotations"] to {"service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"}
set_obj_attribute V1Service, ["spec", "ports"] to [{"port": 3306, "name": "mariadb"}]
set_obj_attribute V1ServiceSpec, ["ports"] to [{"port": 3306, "name": "mariadb"}]
Object from params:
{
    "status": {
        "load_balancer": {
            "ingress": null
        }
    }, 
    "kind": "Service", 
    "spec": {
        "cluster_ip": "172.30.161.5", 
        "external_i_ps": null, 
        "load_balancer_ip": null, 
        "external_name": null, 
        "deprecated_public_i_ps": null, 
        "load_balancer_source_ranges": null, 
        "selector": {
            "app": "mariadb"
        }, 
        "type": "ClusterIP", 
        "ports": [
            {
                "target_port": 3306, 
                "protocol": "TCP", 
                "port": 3306, 
                "name": "mariadb", 
                "node_port": null
            }
        ], 
        "session_affinity": "None"
    }, 
    "api_version": "v1", 
    "metadata": {
        "uid": "e24bd11a-8474-11e7-8c62-0017a4772406", 
        "owner_references": null, 
        "generation": null, 
        "namespace": "tripleo", 
        "labels": {
            "app": "mariadb"
        }, 
        "generate_name": null, 
        "deletion_timestamp": null, 
        "cluster_name": null, 
        "finalizers": null, 
        "deletion_grace_period_seconds": null, 
        "self_link": "/api/v1/namespaces/tripleo/services/mariadb", 
        "resource_version": "9767797", 
        "creation_timestamp": "2017-08-19T00:25:20Z", 
        "annotations": {
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "false"
        }, 
        "name": "mariadb"
    }
}
