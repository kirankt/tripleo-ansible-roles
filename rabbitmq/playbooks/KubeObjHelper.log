arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
Request to parameters: {"spec_cluster_ip": "None", "labels": {"app": "rabbitmq"}, "spec_selector": {"app": "rabbitmq"}, "spec_ports": [{"port": 5672, "name": "amqp"}, {"port": 4369, "name": "epmd"}, {"port": 25672, "name": "rabbitmq-dist"}], "name": "rabbitmq"}
arg_spec:
{
    "annotations": {
        "property_path": [
            "metadata", 
            "annotations"
        ], 
        "type": "dict"
    }, 
    "cert_file": {
        "auth_option": true, 
        "description": [
            "Path to a certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "context": {
        "auth_option": true, 
        "description": [
            "The name of a context found in the Kubernetes config file."
        ]
    }, 
    "debug": {
        "default": false, 
        "description": [
            "Enable debug output from the OpenShift helper. Logging info is written to KubeObjHelper.log"
        ], 
        "type": "bool"
    }, 
    "force": {
        "default": false, 
        "description": [
            "If set to C(True), and I(state) is C(present), an existing object will updated, and lists will be replaced, rather than merged."
        ], 
        "type": "bool"
    }, 
    "host": {
        "auth_option": true, 
        "description": [
            "Provide a URL for acessing the Kubernetes API."
        ]
    }, 
    "key_file": {
        "auth_option": true, 
        "description": [
            "Path to a key file used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "kubeconfig": {
        "auth_option": true, 
        "description": [
            "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json)."
        ], 
        "type": "path"
    }, 
    "labels": {
        "property_path": [
            "metadata", 
            "labels"
        ], 
        "type": "dict"
    }, 
    "name": {
        "property_path": [
            "metadata", 
            "name"
        ]
    }, 
    "namespace": {
        "property_path": [
            "metadata", 
            "namespace"
        ]
    }, 
    "resource_definition": {
        "description": [
            "Provide the YAML definition for the object, bypassing any modules parameters intended to define object attributes."
        ], 
        "type": "dict"
    }, 
    "spec_cluster_ip": {
        "aliases": [
            "cluster_ip"
        ], 
        "property_path": [
            "spec", 
            "cluster_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_deprecated_public_i_ps": {
        "aliases": [
            "deprecated_public_i_ps"
        ], 
        "property_path": [
            "spec", 
            "deprecated_public_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_i_ps": {
        "aliases": [
            "external_i_ps"
        ], 
        "property_path": [
            "spec", 
            "external_i_ps"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_external_name": {
        "aliases": [
            "external_name"
        ], 
        "property_path": [
            "spec", 
            "external_name"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_ip": {
        "aliases": [
            "load_balancer_ip"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_ip"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_load_balancer_source_ranges": {
        "aliases": [
            "load_balancer_source_ranges"
        ], 
        "property_path": [
            "spec", 
            "load_balancer_source_ranges"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_ports": {
        "aliases": [
            "ports"
        ], 
        "property_path": [
            "spec", 
            "ports"
        ], 
        "required": false, 
        "type": "list"
    }, 
    "spec_selector": {
        "aliases": [
            "selector"
        ], 
        "property_path": [
            "spec", 
            "selector"
        ], 
        "required": false, 
        "type": "dict"
    }, 
    "spec_session_affinity": {
        "aliases": [
            "session_affinity"
        ], 
        "property_path": [
            "spec", 
            "session_affinity"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "spec_type": {
        "aliases": [
            "type"
        ], 
        "property_path": [
            "spec", 
            "type"
        ], 
        "required": false, 
        "type": "str"
    }, 
    "src": {
        "description": [
            "Provide a path to a file containing the YAML definition of the object. Mutually exclusive with I(resource_definition)."
        ], 
        "type": "path"
    }, 
    "ssl_ca_cert": {
        "auth_option": true, 
        "description": [
            "Path to a CA certificate used to authenticate with the API."
        ], 
        "type": "path"
    }, 
    "state": {
        "choices": [
            "present", 
            "absent"
        ], 
        "default": "present", 
        "description": [
            "Determines if an object should be created, patched, or deleted. When set to C(present), the object will be created, if it does not exist, or patched, if parameter values differ from the existing object's attributes, and deleted, if set to C(absent). A patch operation results in merging lists and updating dictionaries, with lists being merged into a unique set of values. If a list contains a dictionary with a I(name) or I(type) attribute, a strategic merge is performed, where individual elements with a matching I(name_) or I(type) are merged. To force the replacement of lists, set the I(force) option to C(True)."
        ]
    }, 
    "username": {
        "auth_option": true, 
        "description": [
            "Provide a username for connecting to the API."
        ]
    }, 
    "verify_ssl": {
        "auth_option": true, 
        "description": [
            "Whether or not to verify the API server's SSL certificates."
        ], 
        "type": "bool"
    }
}
request_body:
{
    "kind": "Service", 
    "spec": {
        "clusterIp": "None", 
        "ports": [
            {
                "port": 4369, 
                "name": "epmd"
            }, 
            {
                "port": 5672, 
                "name": "amqp"
            }, 
            {
                "port": 25672, 
                "name": "comm"
            }
        ], 
        "selector": {
            "app": "rabbitmq", 
            "service": "rabbitmq"
        }
    }, 
    "metadata": {
        "labels": {
            "app": "rabbitmq", 
            "service": "rabbitmq"
        }, 
        "namespace": "tripleo", 
        "name": "rabbitmq"
    }
}
Starting create object
EVENT type: ADDED object: {"status": {"load_balancer": {"ingress": null}}, "kind": "Service", "spec": {"cluster_ip": "172.30.76.219", "external_i_ps": null, "load_balancer_ip": null, "external_name": null, "deprecated_public_i_ps": null, "load_balancer_source_ranges": null, "selector": {"app": "rabbitmq", "service": "rabbitmq"}, "type": "ClusterIP", "ports": [{"protocol": "TCP", "node_port": null, "target_port": 4369, "port": 4369, "name": "epmd"}, {"protocol": "TCP", "node_port": null, "target_port": 5672, "port": 5672, "name": "amqp"}, {"protocol": "TCP", "node_port": null, "target_port": 25672, "port": 25672, "name": "comm"}], "session_affinity": "None"}, "api_version": "v1", "metadata": {"uid": "a099dc57-8473-11e7-8c62-0017a4772406", "owner_references": null, "generation": null, "namespace": "tripleo", "labels": {"app": "rabbitmq", "service": "rabbitmq"}, "generate_name": null, "deletion_timestamp": null, "cluster_name": null, "finalizers": null, "deletion_grace_period_seconds": null, "self_link": "/api/v1/namespaces/tripleo/services/rabbitmq", "resource_version": "9767438", "creation_timestamp": "2017-08-19T00:16:20Z", "annotations": null, "name": "rabbitmq"}}
